# GRAYSCALE
if len(image.shape) == 3:
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# ROTATE
rows, cols = image.shape[:2]
center = (cols / 2, rows / 2)
M = cv2.getRotationMatrix2D(center, {angle}, 1)
image = cv2.warpAffine(image, M, (cols, rows))

# RESIZE
image = cv2.resize(image, ({width}, {height}), interpolation={interpolationType})

# MEDIAN_BLUR
image = cv2.medianBlur(image, {kSize})

# GAUSSIAN_BLUR
image = cv2.GaussianBlur(image, ({kernelWidth}, {kernelHeight}), {sigmaX})

# BILATERAL_FILTER
image = cv2.bilateralFilter(image, {d}, {sigmaColor}, {sigmaSpace})

# THRESHOLD
retval, image = cv2.threshold(image, {threshold}, {maxval}, {thresholdType})

# PREWITT
if len(image.shape) == 3:
    image = image[:, :, 0]  #RGB -> grayscale
image = prewitt(image)

# ROBERTS
if len(image.shape) == 3:
    image = image[:, :, 0]  #RGB -> grayscale
image = roberts(image)

# SCHARR
if len(image.shape) == 3:
    image = image[:, :, 0]  #RGB -> grayscale
image = scharr(image)

# SOBEL
if len(image.shape) == 3:
    image = image[:, :, 0]  #RGB -> grayscale
image = sobel(image)

# MORPHOLOGY_TRANSFORM
kernel = np.ones(({kernelRows}, {kernelCols}), np.uint8)
image = cv2.morphologyEx(image, {morphType}, kernel)
